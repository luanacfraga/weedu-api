generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  CONSULTANT
  MANAGER
  COLLABORATOR
}

enum ActionStatus {
  PENDING
  IN_PROGRESS
  PAUSED
  COMPLETED
  DELAYED
}

enum SubscriptionStatus {
  ACTIVE
  INACTIVE
  CANCELLED
  EXPIRED
}

enum PlanType {
  FREE
  PAID
}

model User {
  id              String            @id @default(uuid())
  email           String            @unique
  password        String
  name            String
  role            UserRole
  plan            PlanType          @default(FREE)
  maxCompanies    Int               @default(1)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  deletedAt       DateTime?
  refreshTokens   RefreshToken[]
  companies       Company[]         @relation("CompanyUsers")
  managedActions  Action[]          @relation("ActionManager")
  createdActions  Action[]          @relation("ActionCreator")
  subscriptions   Subscription[]
  consultantCompanies ConsultantCompany[] @relation("Consultant")
  managedUsers    User[]            @relation("ManagerUsers")
  manager         User?             @relation("ManagerUsers", fields: [managerId], references: [id])
  managerId       String?
}

model Company {
  id              String            @id @default(uuid())
  name            String
  cnpj            String            @unique
  address         String?
  phone           String?
  email           String?
  plan            PlanType          @default(FREE)
  actionCount     Int               @default(0)
  maxActions      Int               @default(30)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  deletedAt       DateTime?
  users           User[]            @relation("CompanyUsers")
  actions         Action[]
  subscriptions   Subscription[]
  consultants     ConsultantCompany[]
}

model Action {
  id              String            @id @default(uuid())
  title           String
  description     String
  problem         String
  actionPlan      String
  observation     String?
  why             String?
  startDate       DateTime
  endDate         DateTime
  status          ActionStatus      @default(PENDING)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  deletedAt       DateTime?
  companyId       String
  managerId       String
  creatorId       String
  checklist       String?           @db.Text
  company         Company           @relation(fields: [companyId], references: [id])
  manager         User              @relation("ActionManager", fields: [managerId], references: [id])
  creator         User              @relation("ActionCreator", fields: [creatorId], references: [id])
  metrics         ActionMetric[]
}

model ActionMetric {
  id              String            @id @default(uuid())
  action          Action            @relation(fields: [actionId], references: [id])
  actionId        String
  completedAt     DateTime
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
}

model ConsultantCompany {
  id              String            @id @default(uuid())
  consultant      User              @relation("Consultant", fields: [consultantId], references: [id])
  consultantId    String
  company         Company           @relation(fields: [companyId], references: [id])
  companyId       String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  @@unique([consultantId, companyId])
}

model Subscription {
  id              String            @id @default(uuid())
  user            User              @relation(fields: [userId], references: [id])
  userId          String
  company         Company           @relation(fields: [companyId], references: [id])
  companyId       String
  status          SubscriptionStatus @default(ACTIVE)
  startDate       DateTime
  endDate         DateTime
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
}

model RefreshToken {
  id              String            @id @default(uuid())
  userId          String
  token           String            @unique
  expiresAt       DateTime
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  user            User              @relation(fields: [userId], references: [id])

  @@index([userId])
}
