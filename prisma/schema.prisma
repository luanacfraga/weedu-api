generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  MASTER
  ADMIN
  MANAGER
  COLLABORATOR
}

enum ActionPriority {
  LOW
  MEDIUM
  HIGH
}

enum ActionStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
}

enum SubscriptionStatus {
  ACTIVE
  INACTIVE
  CANCELLED
  EXPIRED
}

enum PlanType {
  FREE
  PAID
}

enum PlanFeature {
  ACTIONS
  COLLABORATORS
  MANAGERS
  AI_SUGGESTIONS
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
}

model User {
  id              String            @id @default(uuid())
  email           String            @unique
  password        String
  name            String
  role            UserRole
  plan            PlanType          @default(FREE)
  maxCompanies    Int               @default(1)
  maxActions      Int               @default(30)
  isActive        Boolean           @default(true)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  deletedAt       DateTime?
  refreshTokens   RefreshToken[]
  companies       Company[]         @relation("CompanyUsers")
  ownedCompanies  Company[]         @relation("CompanyOwner")
  responsibleActions Action[]       @relation("ActionResponsible")
  createdActions  Action[]          @relation("ActionCreator")
  subscriptions   Subscription[]
  managedUsers    User[]            @relation("ManagerUsers")
  manager         User?             @relation("ManagerUsers", fields: [managerId], references: [id])
  managerId       String?
  currentPlan     Plan?             @relation("UserPlan", fields: [currentPlanId], references: [id])
  currentPlanId   String?
}

model Plan {
  id              String            @id @default(uuid())
  type            PlanType
  name            String
  description     String
  price           Float
  features        PlanFeature[]
  limits          PlanLimit[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  subscriptions   Subscription[]
  companies       Company[]         @relation("CompanyPlan")
  users           User[]            @relation("UserPlan")
}

model PlanLimit {
  id              String            @id @default(uuid())
  plan            Plan              @relation(fields: [planId], references: [id])
  planId          String
  feature         PlanFeature
  limit           Int
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  @@unique([planId, feature])
}

model CompanyUsage {
  id              String            @id @default(uuid())
  company         Company           @relation(fields: [companyId], references: [id])
  companyId       String
  feature         PlanFeature
  currentUsage    Int               @default(0)
  lastResetAt     DateTime          @default(now())
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  @@unique([companyId, feature])
}

model AISuggestion {
  id              String            @id @default(uuid())
  action          Action            @relation(fields: [actionId], references: [id])
  actionId        String
  prompt          String
  response        String
  tokensUsed      Int
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
}

model Company {
  id              String            @id @default(uuid())
  name            String
  cnpj            String            @unique
  address         String?
  phone           String?
  email           String?
  plan            Plan              @relation("CompanyPlan", fields: [planId], references: [id])
  planId          String
  owner           User              @relation("CompanyOwner", fields: [ownerId], references: [id])
  ownerId         String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  deletedAt       DateTime?
  users           User[]            @relation("CompanyUsers")
  actions         Action[]
  subscriptions   Subscription[]
  usage           CompanyUsage[]
}

model Action {
  id                String          @id @default(uuid())
  title             String
  description       String
  priority          ActionPriority  @default(MEDIUM)
  status            ActionStatus    @default(PENDING)
  isBlocked         Boolean         @default(false)
  isLate            Boolean         @default(false)
  blockedReason     String?
  estimatedStartDate DateTime
  estimatedEndDate   DateTime
  actualStartDate   DateTime?
  actualEndDate     DateTime?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  deletedAt         DateTime?
  companyId         String
  responsibleId     String
  creatorId         String
  tasks             Task[]
  metrics           ActionMetric[]
  aiSuggestions     AISuggestion[]
  company           Company         @relation(fields: [companyId], references: [id])
  responsible       User            @relation("ActionResponsible", fields: [responsibleId], references: [id])
  creator           User            @relation("ActionCreator", fields: [creatorId], references: [id])
}

model Task {
  id          String      @id @default(uuid())
  description String
  status      TaskStatus  @default(PENDING)
  completedAt DateTime?
  order       Int         @default(0)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  actionId    String
  action      Action      @relation(fields: [actionId], references: [id])

  @@index([actionId, status, order])
}

model ActionMetric {
  id              String            @id @default(uuid())
  action          Action            @relation(fields: [actionId], references: [id])
  actionId        String
  completedAt     DateTime
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
}

model Subscription {
  id              String            @id @default(uuid())
  user            User              @relation(fields: [userId], references: [id])
  userId          String
  company         Company           @relation(fields: [companyId], references: [id])
  companyId       String
  plan            Plan              @relation(fields: [planId], references: [id])
  planId          String
  status          SubscriptionStatus @default(ACTIVE)
  startDate       DateTime
  endDate         DateTime
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
}

model RefreshToken {
  id              String            @id @default(uuid())
  userId          String
  token           String            @unique
  expiresAt       DateTime
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  user            User              @relation(fields: [userId], references: [id])

  @@index([userId])
}
